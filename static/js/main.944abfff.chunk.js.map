{"version":3,"sources":["../../../src/tickets.ts","../../../src/index.ts","../../../src/exportExcel.ts","../../../src/Fahrt.ts","../../../src/Fahrtabschnitt.ts","../../../src/efaHelper.ts","FormLoadingSpinner.js","SearchStopField.tsx","StopField.tsx","StopBox.tsx","RouteView.tsx","Routes.tsx","Reisende.tsx","Tarifangebot.tsx","saveToFile.ts","App.tsx","serviceWorker.ts","index.tsx","../../../src/Fahrgast.ts","../../../src/Tester.ts"],"names":["Produkt","Preisstufe","this","FormLoadingSpinner","props","isLoading","icon","faSpinner","Component","getSuggestionValue","suggestion","name","renderSuggestion","city","shouldRenderSuggestions","value","trim","length","SearchStopField","onSuggestionSelected","event","data","handleNewSelectedStop","onSuggestionsFetchRequested","getSuggestions","onSuggestionsClearRequested","setState","suggestions","state","handleChange","bind","term","dvb","then","slice","error","console","inputValue","toLowerCase","replace","getStopArray","currentTarget","inputProps","placeholder","onChange","className","StopField","stop","type","aria-label","onClick","handleResetClick","aria-hidden","id","React","StopBox","stopField","title","moment","locale","NodeTableRowsItems","stopType","mode","line","direction","stopName","abfahrt","RouteView","formatDate","time","departure","gleis","platform","richtung","linie","NodeTableRows","node","departureRow","arrivalRow","arrival","rows","stops","map","index","RouteDetails","nodeViews","RouteNodes","key","NodeItem","modeImage","iconUrl","src","alt","lineName","LineItems","trip","lines","nodes","forEach","undefined","push","Fragment","StopItem","stopLocation","showDetails","handleSelectRoute","handleEditTrip","toggleShowDetails","handleSelectedTrip","dauer","Date","duration","format","umstiege","interchanges","isSelectable","selectable","faCheckSquare","faPen","faChevronUp","faChevronDown","date","Routes","fetchedRoutes","from","fromStop","to","toStop","dateTime","route","log","catch","err","prevProps","fetchRoutes","content","selectedTrip","e","size","pulse","trips","Reisende","disabled","faTrash","faPlus","Tarifangebot","tickets","Ticket","getAllProducts","actionMeta","angebot","item","produkt","preisstufe","handleProductsChange","options","style","width","isMulti","selectedOption","handleNewSelectedProducts","savetoFile","testCase","fileName","toISOString","Tester","exportSingleTestCase","buffer","a","save","UseTestCaseComponent","handleExportToFile","faFileDownload","faPaperPlane","App","start","coords","POI_TYPE","Stop","ziel","tripDateTime","angebote","fahrgaeste","Fahrgast","nr","handleNewSelectedFromStop","handleResetClickForFromStop","handleNewSelectedToStop","handleResetClickForToStop","handelNewDate","stop_id","toDate","arrayOfTickets","ticket","isTripSelected","dateFormat","timeFormat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","arr"],"mappings":"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","file":"static/js/main.944abfff.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Produkt;\n(function (Produkt) {\n    Produkt[\"Einzelfahrt\"] = \"Einzelfahrt\";\n    Produkt[\"EinzelfahrtErmaessigt\"] = \"Einzelfahrt erm\\u00E4\\u00DFigt\";\n    Produkt[\"ViererKarte\"] = \"4er-Karte\";\n    Produkt[\"ViererKarteErmaessigt\"] = \"4er-Karte erm\\u00E4\\u00DFigt\";\n    Produkt[\"Tageskarte\"] = \"Tageskarte\";\n    Produkt[\"TageskarteErmaessigt\"] = \"Tageskarte erm\\u00E4\\u00DFigt\";\n    Produkt[\"NachtTicket\"] = \"NachtTicket\";\n    Produkt[\"Familientageskarte\"] = \"Familientageskarte\";\n    Produkt[\"Kleingruppenkarte\"] = \"Kleingruppenkarte\";\n    Produkt[\"Wochenkarte\"] = \"Wochenkarte\";\n    Produkt[\"WochenkarteErmaessigt\"] = \"Wochenkarte erm\\u00E4\\u00DFigt\";\n    Produkt[\"Monatskarte\"] = \"Monatskarte\";\n    Produkt[\"MonatskarteErmaessigt\"] = \"Monatskarte erm\\u00E4\\u00DFigt\";\n    Produkt[\"NeunUhrMonatskarte\"] = \"9-Uhr-Monatskarte\";\n})(Produkt = exports.Produkt || (exports.Produkt = {}));\nvar Preisstufe;\n(function (Preisstufe) {\n    Preisstufe[\"PS1\"] = \"PS 1\";\n    Preisstufe[\"PS2\"] = \"PS 2\";\n    Preisstufe[\"PS3\"] = \"PS 3\";\n    Preisstufe[\"PS4\"] = \"PS 4\";\n    Preisstufe[\"PSA\"] = \"PS A\";\n    Preisstufe[\"PSA1\"] = \"PS A 1\";\n    Preisstufe[\"PSB\"] = \"PS B\";\n    Preisstufe[\"PSC\"] = \"PS C\";\n    Preisstufe[\"PSD\"] = \"PS D\";\n})(Preisstufe = exports.Preisstufe || (exports.Preisstufe = {}));\nclass Ticket {\n    constructor(produkt, preisstufe, reisendenbezug = [1], pv = { orgId: 6060, name: \"VVO\" }) {\n        this.produkt = produkt;\n        this.preisstufe = preisstufe;\n        this.reisendenbezug = reisendenbezug;\n        this.pv = pv;\n        this.priceTableMap = Ticket.getPretPriceTableForProduct(this.produkt);\n    }\n    static getAllProducts() {\n        const items = Ticket.allProducts;\n        const newItems = items.map((item) => {\n            const alabel = `${item.produkt} ${item.preisstufe}`;\n            const newObject = {\n                label: alabel,\n                value: item.id.toString(),\n            };\n            return Object.assign(Object.assign({}, item), newObject);\n        });\n        return newItems;\n    }\n    static getPretPriceTableForProduct(produkt) {\n        switch (produkt) {\n            case Produkt.Einzelfahrt:\n                return new Map([\n                    [Preisstufe.PS1, 250],\n                    [Preisstufe.PS2, 450],\n                    [Preisstufe.PS3, 680],\n                    [Preisstufe.PS4, 900],\n                ]);\n            case Produkt.EinzelfahrtErmaessigt:\n                return new Map([\n                    [Preisstufe.PS1, 170],\n                    [Preisstufe.PS2, 310],\n                    [Preisstufe.PS3, 460],\n                    [Preisstufe.PS4, 600],\n                ]);\n            case Produkt.Tageskarte:\n                return new Map([\n                    [Preisstufe.PSA, 650],\n                    [Preisstufe.PSB, 950],\n                    [Preisstufe.PSD, 1500],\n                ]);\n            case Produkt.TageskarteErmaessigt:\n                return new Map([\n                    [Preisstufe.PSA, 550],\n                    [Preisstufe.PSB, 800],\n                    [Preisstufe.PSD, 1300],\n                ]);\n            case Produkt.NachtTicket:\n                return new Map([\n                    [Preisstufe.PSD, 800],\n                ]);\n            case Produkt.Familientageskarte:\n                return new Map([\n                    [Preisstufe.PSA, 1000],\n                    [Preisstufe.PSB, 1450],\n                    [Preisstufe.PSD, 2150],\n                ]);\n            case Produkt.Kleingruppenkarte:\n                return new Map([\n                    [Preisstufe.PSA, 1650],\n                    [Preisstufe.PSB, 2350],\n                    [Preisstufe.PSD, 3150],\n                ]);\n        }\n    }\n    export(fahrtenbezug) {\n        let result = \"\";\n        result += `${this.pv.orgId};${this.pv.name}\\r\\n`;\n        result += `${this.produkt}\\r\\n`;\n        result += `${this.preisstufe}\\r\\n`;\n        result += `[${this.price()};Euro-Cent]\\r\\n`;\n        result += `[${this.reisendenbezug.toString()}]\\r\\n`;\n        const reisendenbezugVon = `${fahrtenbezug.VonFahrtindex}:${fahrtenbezug.VonHaltestellenindex}`;\n        const reisendenbezugNach = `${fahrtenbezug.NachFahrtindex}:${fahrtenbezug.NachHaltestellenindex}`;\n        result += `[${reisendenbezugVon};${reisendenbezugNach}]`;\n        return result;\n    }\n    name() {\n        return this.produkt;\n    }\n    price() {\n        const price = this.priceTableMap.get(this.preisstufe) ? this.priceTableMap.get(this.preisstufe).toString() : \"\";\n        return price;\n    }\n}\nexports.Ticket = Ticket;\nTicket.allProducts = [\n    { id: 1, produkt: Produkt.Einzelfahrt, preisstufe: Preisstufe.PS1 },\n    { id: 2, produkt: Produkt.Einzelfahrt, preisstufe: Preisstufe.PS2 },\n    { id: 3, produkt: Produkt.Einzelfahrt, preisstufe: Preisstufe.PS3 },\n    { id: 4, produkt: Produkt.Einzelfahrt, preisstufe: Preisstufe.PS4 },\n    { id: 5, produkt: Produkt.EinzelfahrtErmaessigt, preisstufe: Preisstufe.PS1 },\n    { id: 6, produkt: Produkt.EinzelfahrtErmaessigt, preisstufe: Preisstufe.PS2 },\n    { id: 7, produkt: Produkt.EinzelfahrtErmaessigt, preisstufe: Preisstufe.PS3 },\n    { id: 8, produkt: Produkt.EinzelfahrtErmaessigt, preisstufe: Preisstufe.PS4 },\n    { id: 9, produkt: Produkt.Tageskarte, preisstufe: Preisstufe.PSA },\n    { id: 10, produkt: Produkt.Tageskarte, preisstufe: Preisstufe.PSB },\n    { id: 11, produkt: Produkt.Tageskarte, preisstufe: Preisstufe.PSD },\n    { id: 12, produkt: Produkt.TageskarteErmaessigt, preisstufe: Preisstufe.PSA },\n    { id: 13, produkt: Produkt.TageskarteErmaessigt, preisstufe: Preisstufe.PSB },\n    { id: 14, produkt: Produkt.TageskarteErmaessigt, preisstufe: Preisstufe.PSD },\n    { id: 15, produkt: Produkt.NachtTicket, preisstufe: Preisstufe.PSD },\n    { id: 16, produkt: Produkt.Familientageskarte, preisstufe: Preisstufe.PSA },\n    { id: 17, produkt: Produkt.Familientageskarte, preisstufe: Preisstufe.PSB },\n    { id: 18, produkt: Produkt.Familientageskarte, preisstufe: Preisstufe.PSD },\n    { id: 19, produkt: Produkt.Kleingruppenkarte, preisstufe: Preisstufe.PSA },\n    { id: 20, produkt: Produkt.Kleingruppenkarte, preisstufe: Preisstufe.PSB },\n    { id: 21, produkt: Produkt.Kleingruppenkarte, preisstufe: Preisstufe.PSD },\n];\n//# sourceMappingURL=tickets.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tickets_1 = require(\"./tickets\");\nexports.Ticket = tickets_1.Ticket;\nexports.Produkt = tickets_1.Produkt;\nexports.Preisstufe = tickets_1.Preisstufe;\nvar Fahrgast_1 = require(\"./Fahrgast\");\nexports.Fahrgast = Fahrgast_1.Fahrgast;\nvar Tester_1 = require(\"./Tester\");\nexports.Tester = Tester_1.Tester;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst exceljs = require(\"exceljs\");\nclass ExcelExport {\n    constructor() {\n        this.workbook = new exceljs.Workbook();\n        this.workbook.addWorksheet(\"SheetName\", { properties: { tabColor: { argb: \"FFC0000\" } } });\n        this.worksheet = this.workbook.getWorksheet(\"SheetName\");\n    }\n    addRow(arr) {\n        this.worksheet.addRow(arr);\n    }\n    saveFile(filename) {\n        this.workbook.xlsx.writeFile(filename)\n            .then(() => {\n            console.log(\"Exported file!\");\n        });\n    }\n    toBuffer() {\n        return this.workbook.xlsx.writeBuffer();\n    }\n}\nexports.ExcelExport = ExcelExport;\n//# sourceMappingURL=exportExcel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Fahrtabschnitt_1 = require(\"./Fahrtabschnitt\");\nclass Fahrt {\n    constructor(fahrt, filterFootpath = false) {\n        let fahrtabschnitte = fahrt.nodes;\n        if (filterFootpath) {\n            fahrtabschnitte = fahrtabschnitte.filter(Fahrt.isINodeFootpath);\n        }\n        this.zwischenhaltestellen = fahrtabschnitte.map((item) => new Fahrtabschnitt_1.Fahrtabschnitt(item));\n    }\n    static isINodeFootpath(element) {\n        if (element.mode) {\n            switch (element.mode.name) {\n                case \"Footpath\":\n                case \"StairsUp\":\n                case \"StairsDown\":\n                    return false;\n                default:\n                    return true;\n            }\n        }\n        else {\n            return true;\n        }\n    }\n    fahrtenbezug() {\n        const obj = {\n            VonFahrtindex: 1,\n            VonHaltestellenindex: 1,\n            NachFahrtindex: this.zwischenhaltestellen.length,\n            NachHaltestellenindex: this.zwischenhaltestellen[this.zwischenhaltestellen.length - 1].stops.length,\n        };\n        return obj;\n    }\n    exportToExcel() {\n        let arr = [];\n        this.zwischenhaltestellen.forEach((item) => {\n            arr = arr.concat(item.exportToExcel());\n        });\n        for (let index = 0; index < Fahrt.ExcelColumns; index++) {\n            if (!arr[index]) {\n                arr[index] = \"\";\n            }\n        }\n        return arr;\n    }\n    exportToCsv() {\n        let result = \"\";\n        this.zwischenhaltestellen.forEach((item) => {\n            result += item.exportToCsv() + \"\\r\\n\";\n        });\n        return result;\n    }\n}\nexports.Fahrt = Fahrt;\nFahrt.ExcelColumns = 6 * 7;\n//# sourceMappingURL=Fahrt.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst efaHelper_1 = require(\"./efaHelper\");\nconst Tester_1 = require(\"./Tester\");\nclass Fahrtabschnitt {\n    constructor(node) {\n        this.stops = node.stops;\n        this.departure = node.departure;\n        this.arrival = node.arrival;\n        this.mode = node.mode;\n        this.line = node.line;\n        this.direction = node.direction;\n        this.diva = node.diva;\n        this.duration = node.duration;\n        this.path = node.path;\n    }\n    static formatINodeMode(element) {\n        switch (element.name) {\n            case \"Train\":\n                return \"09;S-Bahn\";\n            case \"CityBus\":\n            case \"PlusBus\":\n                return \"06;Bus\";\n            case \"Tram\":\n                return \"05;Straßenbahn\";\n            case \"Cablecar\":\n                return \"56;Bergbahn\";\n            case \"Ferry\":\n                return \"07;Schiff/Fähre\";\n            default:\n                return element.name;\n        }\n    }\n    static apiIdToGlobalID(id) {\n        const stopNumber = parseInt(id, 10);\n        return efaHelper_1.efa2globalID(stopNumber);\n    }\n    static apiDiva2GlobalID(line, diva) {\n        if (diva) {\n            const efaID = `${diva.network}:${diva.number}`;\n            const globalID = efaHelper_1.efaLine2GlobalLine(efaID);\n            return `${globalID};${line}`;\n        }\n        else {\n            return `;${line}`;\n        }\n    }\n    static exportStopToString(stop) {\n        const id = Fahrtabschnitt.apiIdToGlobalID(stop.id);\n        const name = stop.name + \" \" + stop.city;\n        const arrival = Tester_1.Tester.convertDateToXmlTimestamp(stop.arrival);\n        const departure = Tester_1.Tester.convertDateToXmlTimestamp(stop.departure);\n        return `${id};${name};${arrival};${departure}`;\n    }\n    exportToExcel() {\n        const stopsArray = this.stopsToStringArray();\n        let first = stopsArray.shift();\n        if (!first) {\n            first = \"\";\n        }\n        let last = stopsArray.pop();\n        if (!last) {\n            last = \"\";\n        }\n        const verkehrsmitteltyp = this.mode ? Fahrtabschnitt.formatINodeMode(this.mode) : \"\";\n        const linie = Fahrtabschnitt.apiDiva2GlobalID(this.line, this.diva);\n        const linienbetreiber = \"00;UNKNOWN\";\n        let mid = \"\";\n        stopsArray.forEach((item, index) => {\n            mid += item;\n            if (index !== stopsArray.length - 1) {\n                mid += \"\\r\\n\";\n            }\n        });\n        return [first, mid, last, verkehrsmitteltyp, linie, linienbetreiber];\n    }\n    exportToCsv() {\n        const stopsArray = this.stopsToStringArray();\n        const first = stopsArray.shift();\n        const last = stopsArray.pop();\n        let mid = \"\";\n        if (stopsArray.length > 0) {\n            stopsArray.forEach((item) => {\n                mid += item + \"\\r\\n\";\n            });\n        }\n        const result = `\"${first}\";\"${mid}\";\"${last}\";`;\n        return result;\n    }\n    stopsToStringArray() {\n        const arr = this.stops.map((item) => {\n            return Fahrtabschnitt.exportStopToString(item);\n        });\n        return arr;\n    }\n}\nexports.Fahrtabschnitt = Fahrtabschnitt;\n//# sourceMappingURL=Fahrtabschnitt.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lines_json_1 = require(\"./lines.json\");\nconst stops_json_1 = require(\"./stops.json\");\nfunction efa2globalID(efaID) {\n    const foundStop = stops_json_1.stops.find((e) => e.efaID === efaID);\n    if (foundStop) {\n        return foundStop.globalID;\n    }\n    else {\n        return `ERROR! ${efaID} not found`;\n    }\n}\nexports.efa2globalID = efa2globalID;\nfunction efaLine2GlobalLine(efaLine) {\n    const foundLine = lines_json_1.lines.find((e) => e.efaLiniennummer === efaLine);\n    if (foundLine) {\n        return foundLine.globalID;\n    }\n    else {\n        return `TODO! ${efaLine}`;\n    }\n}\nexports.efaLine2GlobalLine = efaLine2GlobalLine;\n//# sourceMappingURL=efaHelper.js.map","import React, { Component } from 'react';\nimport './FormLoadingSpinner.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\n\nclass FormLoadingSpinner extends Component {\n    render() {\n        const isLoading = this.props.isLoading;\n        if (isLoading) {\n            return (\n                // <i className=\"fa fa-spinner fa-pulse\" id=\"loadingSpinner\"></i>\n                <FontAwesomeIcon icon={faSpinner} />\n            )\n        }\n        else {\n            return null\n        }\n    }\n}\n\nexport default FormLoadingSpinner","import React, { Component, FormEvent, ChangeEvent } from 'react';\n// import axios from 'axios';\nimport * as dvb from 'dvbjs';\nimport {IPoint} from 'dvbjs';\nimport Autosuggest, { OnSuggestionSelected, SuggestionSelectedEventData, SuggestionsFetchRequested, SuggestionsFetchRequestedParams, InputProps } from 'react-autosuggest';\nimport './SearchStopField.css'\nimport FormLoadingSpinner from './FormLoadingSpinner.js'\n\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import { faSearch } from '@fortawesome/free-solid-svg-icons'\n\n\n/* ----------------- */\n/*    Helper Methods */\n/* ----------------- */\n\nfunction escapeRegexCharacters(str:string) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n/* ----------------- */\n/*    Suggestions    */\n/* ----------------- */\n\n// type renderInputComponentProps = { \n//     placeholder?: string,\n//     value:string,\n//     className?: string,\n//     onChange: (event: ChangeEvent<HTMLInputElement>) => void\n// }; \n\n\nconst getSuggestionValue = (suggestion: IPoint) => suggestion.name;\n\nconst renderSuggestion = (suggestion:IPoint) => (\n    <div>\n    {suggestion.name}<br />\n    <small>{suggestion.city}</small>\n    </div>\n    );\n    \n    const shouldRenderSuggestions = (value:string) => {\n        // console.log(\"shouldRenderSuggestions\")\n        return value.trim().length > 2;\n    }\n    \n    /* ----------------- */\n    /*    Exports        */\n    /* ----------------- */\n    \n    export interface ISearchStopFieldProps {\n        handleNewSelectedStop : (stop_id:IPoint) => void,\n        placeholder: string\n    }\n    interface IState {\n        value:string, \n        suggestions: IPoint[],\n        isLoading: boolean\n    }\n    \n    export class SearchStopField extends Component<ISearchStopFieldProps, IState> {\n        \n        // renderInputComponent : RenderInputComponent<IPoint> = (inputProps : InputProps<IPoint>) : ReactNode => (\n        //     <div className=\"input-group\">\n        //     <div className=\"input-group-prepend\">\n        //     <div className=\"input-group-text\">\n        //     {/* <i className=\"fa fa-search\"></i> */}\n        //     <FontAwesomeIcon icon={faSearch} />\n        //     </div>\n        //     </div>\n        //     {/* onChange={this.handleChange}  */}\n        //     <input {...inputProps} />\n        //     </div>\n            \n        //     )\n            \n            constructor(props: ISearchStopFieldProps) {\n                super(props);\n                this.state = {\n                    value: '',\n                    suggestions: [],\n                    isLoading: false\n                };\n                this.handleChange = this.handleChange.bind(this);\n            }\n            \n            onSuggestionSelected : OnSuggestionSelected<IPoint> = (event:React.FormEvent<any>, data: SuggestionSelectedEventData<IPoint>) => {\n                return this.props.handleNewSelectedStop(data.suggestion);\n            }\n            \n            //    onChange = (event: React.ChangeEvent<HTMLInputElement>, params: Autosuggest.ChangeEvent)=> {\n            //         const newValue = event.target.value;\n            //         this.setState({\n            //              value: newValue\n            //         });\n            //     };\n            \n            getStopArray(term:string) {\n                // console.log(\"getStopArray fired\")\n                this.setState({\n                    isLoading: true\n                });\n                dvb.findStop(term)\n                .then((data) => {\n                    this.setState({\n                        suggestions: data.slice(0, 15),\n                        isLoading: false\n                    });\n                },\n                (error) => {\n                    console.error(error);\n                }\n                );\n            }\n            \n            getSuggestions(value:string) {\n                // console.log(\"getSuggestions\")\n                const inputValue = escapeRegexCharacters(value.trim().toLowerCase());\n                const inputLength = inputValue.length;\n                \n                if (inputLength === 0) {\n                    this.setState({\n                        suggestions: []\n                    });\n                }\n                else {\n                    this.getStopArray(inputValue);\n                }\n            };\n            \n            onSuggestionsFetchRequested : SuggestionsFetchRequested = ( {value}: SuggestionsFetchRequestedParams) => {\n                // console.log(\"onSuggestionsFetchRequested\")\n                this.getSuggestions(value)\n            };\n            \n            onSuggestionsClearRequested = () => {\n                this.setState({\n                    suggestions: []\n                });\n            };\n            //TEST\n            handleChange (event: ChangeEvent<HTMLInputElement>, ) : void {\n            // handleChange(event: React.FormEvent<IPoint>, params: ChangeEvent): void {\n            // handleChange {\n                // console.log(\"handleChange\")\n                // console.log(e.target.value)\n                // No longer need to cast to any - hooray for react!\n                this.setState({value: event.currentTarget.value});\n                // console.log(this.state.value)\n            }\n            \n            render() {\n                const { value, suggestions , isLoading } = this.state;\n                const inputProps : InputProps<dvb.IPoint>= {\n                    placeholder: this.props.placeholder,\n                    value,\n                    onChange: this.handleChange,\n                };\n                \n                return (\n                <div className=\"SearchStopField\">\n                    \n                        <Autosuggest\n                        suggestions= {suggestions}\n                        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                        onSuggestionSelected={this.onSuggestionSelected}\n                        getSuggestionValue={getSuggestionValue}\n                        renderSuggestion={renderSuggestion}\n                        inputProps={inputProps}\n                        shouldRenderSuggestions={shouldRenderSuggestions}\n                        // renderInputComponent={this.renderInputComponent}\n                        />\n                        <FormLoadingSpinner isLoading={isLoading} />\n                        {/* <FormLoadingSpinner isLoading={true} /> */}\n            \n                </div>\n                    );\n                }\n            }","import React from 'react';\n\nimport {IPoint} from 'dvbjs';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import { faPen } from '@fortawesome/free-solid-svg-icons'\n\n// interface IState {}\ninterface IProps {\n    stop: IPoint,\n    handleResetClick: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void)\n}\n\nclass StopField extends React.Component<IProps> {\n    // constructor(props:IProps){\n    //     super(props);\n    // }\n    render(){\n        return (\n            <>\n                   <span>{this.props.stop.city} - {this.props.stop.name} </span>\n                   <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.props.handleResetClick}>\n                    <span aria-hidden=\"true\">&times;</span>\n                    {/* <FontAwesomeIcon size=\"xs\" icon={faPen} /> */}\n                    </button>\n<br/>\n                   <span className=\"small text-secondary\">(ID:{this.props.stop.id}) </span>\n                        \n            </>\n        )\n    }\n}\n\nexport default StopField;","import React from \"react\";\nimport { SearchStopField } from \"./SearchStopField\";\nimport StopField from \"./StopField\";\nimport { IPoint } from \"dvbjs\";\n\n\ninterface IState{\n    \n}\n\ninterface IProps{\n    title:string,\n    stop: IPoint | null,\n    placeholder: string,\n    handleNewSelectedStop:( stop_id: IPoint) => void,\n    handleResetClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\n\nclass StopBox extends React.Component<IProps> {    \n    render() {\n        const stopField = this.props.stop ? <StopField stop={this.props.stop} handleResetClick={this.props.handleResetClick}/>: <SearchStopField placeholder={this.props.placeholder} handleNewSelectedStop={this.props.handleNewSelectedStop}/>\n        return (\n            <div>\n                <div className=\"card shadow-sm mb-2 bg-white rounded\">\n                    <div className=\"card-header\">{this.props.title}</div>\n                    <div className=\"card-body\">\n                        {stopField}\n                    </div>\n                </div>\n            </div>\n            )\n        }\n        \n    }\n    \n    export default StopBox","import React, { FunctionComponent } from 'react'\nimport { ITrip, IStopLocation, INode, IStop, IMode } from 'dvbjs'\nimport moment from 'moment';\nimport './RouteView.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPen, faChevronDown, faChevronUp, faCheckSquare } from '@fortawesome/free-solid-svg-icons'\n\nmoment.locale('de');\n\ninterface IState{\n    showDetails: boolean\n}\n\ninterface IProps{\n    trip: ITrip,\n    handleSelectedTrip: (trip:ITrip) => void,\n    handleEditTrip: ()=> void\n    selectable: boolean\n}\n// interface LineItemProps {\n//     node: INode\n// }\n\ninterface INodeTableRowsItemsProps {\n    stop: IStopLocation | IStop | undefined\n    stopType: \"DEPARTURE\" | \"ARRIVAL\" | \"STOPS\",\n    mode?: IMode,\n    line: string,\n    direction?: string,\n\n} \n\nconst NodeTableRowsItems = ({stop,stopType, mode, line, direction} : INodeTableRowsItemsProps) => {\n    if (!stop) {\n        return (<></>)\n    } else {\n        const stopName = `${stop!.city} - ${stop!.name}`\n        let abfahrt: string = \"\"\n        // if ('time' in stop) {\n        //     abfahrt = stop.time.toLocaleTimeString()\n        // }\n        if (('time' in stop) && (stopType === \"ARRIVAL\")){\n            abfahrt = RouteView.formatDate(stop.time) \n        }\n        if (('time' in stop) && (stopType === \"DEPARTURE\")){\n            abfahrt = RouteView.formatDate(stop.time) \n        }\n        if (('departure' in stop) && (stopType === \"STOPS\")){\n            abfahrt = RouteView.formatDate(stop.departure)\n        }\n        \n        const gleis = stop.platform && stopType !== \"STOPS\" ? stop.platform!.name : \"-\"\n\n        const richtung = direction ? direction! : \"\"\n        const linie = <NodeItem mode={mode} line={line}/>\n\n        return (\n            <tr>\n               \n                <td>\n                    {(stopType === \"STOPS\") ? abfahrt : <b>{abfahrt}</b> }\n                </td>\n                <td>\n                    {(stopType === \"STOPS\") ? stopName : <b>{stopName}</b> }\n                </td>\n                <td>\n                    {gleis}\n                </td>\n                <td>\n                    {(stopType === \"DEPARTURE\") ? linie : \"\"}\n                </td>\n                <td>\n                    {(stopType === \"DEPARTURE\") && richtung}\n                </td>\n            </tr>\n        )\n    }\n\n    \n}\n\ninterface INodeTableRowsProps {\n    node: INode\n}\n\nconst NodeTableRows = ({node}:INodeTableRowsProps) => {\n    const departureRow = <NodeTableRowsItems stop={node.departure} stopType=\"DEPARTURE\" line={node.line} mode={node.mode} direction={node.direction}/>\n    const arrivalRow =  <NodeTableRowsItems stop={node.arrival} line={node.line} stopType=\"ARRIVAL\"/>\n    const stopRows = node.stops.map((stop,index) => {\n        if ((index !== 0) && (index !== node.stops.length - 1)) {\n        return <NodeTableRowsItems line={node.line} stop={stop} stopType=\"STOPS\"/>\n        } else {\n            return <></>\n        }\n        \n    })  \n    const rows = [departureRow, stopRows, arrivalRow]\n    return (\n        <>\n        {rows}\n        </>\n    )\n}\n\ninterface IRouteDetailsProps {\n    RouteNodes: INode[]\n}\nclass RouteDetails extends React.Component<IRouteDetailsProps> {\n\n    render(){\n        const nodeViews = this.props.RouteNodes.map((node, index) => {\n            return <NodeTableRows node={node} key={index}/>\n        })\n        return (\n           <div className=\"table-responsive\">\n <table className=\"table table-sm\">\n               \n               <thead>\n               <tr>\n                   <th>Zeit</th>\n                   <th>Haltestelle</th>\n                   <th>Gleis</th>\n                   <th>Linie</th>\n                   <th>Richtung</th>\n                   \n                   </tr>  \n               </thead>\n          \n           <tbody>{nodeViews}</tbody>\n           \n       </table>\n   \n           </div>\n           )\n\n    }\n\n}\n\nconst NodeItem : FunctionComponent<{mode?: IMode, line: string }> = ({mode,line}) => {\n    let modeImage : JSX.Element\n    if (mode && mode!.iconUrl) {\n       modeImage = <img src ={mode!.iconUrl} alt={mode.title} className=\"nodeItemImage\"/>\n    }  else {\n        modeImage = <></>;\n    }\n    const lineName = line\n    return (\n        <span>\n            {modeImage}{lineName}\n        </span>\n    )\n}\n\nconst LineItems : FunctionComponent<{trip:ITrip}> = ({trip}) => {\n    let lines : JSX.Element[] = []\n    trip.nodes.forEach((node, index) =>{\n        if ((node.mode !== undefined) && \n            (node.mode!.name !== \"Footpath\") && \n            (node.mode!.name !== \"StairsUp\") &&\n            (node.mode!.name !== \"StairsDown\")\n            ) {\n            lines.push(<NodeItem mode={node.mode} line={node.line} key={index} />)\n            if (index < trip.nodes.length - 1 ) {\n                lines.push(<span> &#10095; </span>)\n            }\n        }\n    })\n    return (\n        <React.Fragment>\n            {lines}\n        </React.Fragment>)\n}\n\nconst StopItem : FunctionComponent<{stopLocation: IStopLocation|undefined}> = ({stopLocation}) =>  {\n    if (stopLocation) {\n        return ( \n            <span>{stopLocation!.city} - {stopLocation!.name} </span> \n        )\n    } else {\n        return (<span>unknown</span>)\n    }\n} \n\n\nclass RouteView extends React.Component<IProps, IState> {\n    // constructor(props:IProps){\n    //     super(props)\n    // }\n    constructor(props:IProps){\n        super(props)\n        this.state = {\n            showDetails: false\n        }\n        this.handleSelectRoute = this.handleSelectRoute.bind(this)\n        this.handleEditTrip = this.handleEditTrip.bind(this)\n        this.toggleShowDetails = this.toggleShowDetails.bind(this)\n    }\n    \n    static formatDate(date: Date) : string {\n        // if (stopLocation) {\n            const format = \"HH:mm\"\n            const dateString = moment(date).format(format)\n            return dateString\n        // } else {\n        //     return \"Keine Zeitangabe\"\n        // }\n    } \n    toggleShowDetails(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        this.setState({showDetails: !this.state.showDetails})\n    }\n    \n\n    handleSelectRoute(event: React.FormEvent<HTMLButtonElement>) :void {\n        this.props.handleSelectedTrip(this.props.trip)\n    }\n    handleEditTrip(event: React.FormEvent<HTMLButtonElement>) :void {\n        this.props.handleEditTrip()\n    }\n    \n\n    render(){\n        const showDetails = this.state.showDetails\n        const trip = this.props.trip\n\n        const departure = trip.departure ? RouteView.formatDate(trip.departure!.time) : \"Keine Zeitangabe\"\n        const arrival = trip.arrival ? RouteView.formatDate(trip.arrival!.time) : \"Keine Zeitangabe\"\n        const dauer =  moment(new Date(0,0,0,0,trip.duration)).format(\"HH:mm\")\n        const umstiege = trip.interchanges \n        const isSelectable = this.props.selectable\n        \n        return (\n            <div className=\"row\">\n                \n                <div className=\"card col-sm-12 shadow-sm mb-2 rounded\">\n                    {/* <h4 className=\"card-header\">{this.props.title}</h4> */}\n                    <div className=\"card-body\">\n                       <table className=\"routeViewTable\">\n                           <thead>\n                               <tr>\n                                    <th className=\"bhf\">Bahnhof/Haltestelle</th>\n                                    <th className=\"zeit\">Zeit</th>\n                                    <th className=\"dauer\">Dauer\t</th>\n                                    <th className=\"umst\">Umstiege</th>\n                                    <th className=\"prod\">Produkte</th>\n                                    <th className=\"select\"></th>\n                               </tr>\n\n                           </thead>\n                          <tbody>\n                          <tr>\n                               <td>\n                               <StopItem stopLocation={trip.departure}/><br/>\n                               <StopItem stopLocation={trip.arrival}/><br/>\n                               </td>\n                               <td>\n                                   {departure}<br/>\n                                   {arrival}\n                               </td>\n                               <td>\n                                   {/* DAUER */}\n                                   {dauer}\n                               </td>\n                               <td>\n                                   {/* Umstiege */}\n                                   {umstiege}\n                               </td>\n                               <td>\n                                   {/* Linien */}\n                                   <LineItems trip={trip} />\n                               </td>\n                               <td> \n                                   {/* Buttons */}\n                                   \n                                   { isSelectable \n                                   ? <button type=\"button\" className=\"m-1 btn btn-primary\" value=\"\" onClick={this.handleSelectRoute}> <FontAwesomeIcon icon={faCheckSquare} /> auswählen</button> : \n                                   <button type=\"button\" className=\"m-1 btn btn-secondary btn-sm\" value=\"\" onClick={this.handleEditTrip}> <FontAwesomeIcon icon={faPen}  /> Ändern </button> }\n                                   <button type=\"button\" className=\"m-1 btn btn-sm btn-secondary\" onClick={this.toggleShowDetails}>\n                                   <FontAwesomeIcon  icon={showDetails ? faChevronUp : faChevronDown }  />\n                                    Zwischenhalte\n                                   </button>\n\n                               </td>\n                           </tr>\n                          </tbody>\n                         \n                       </table>\n                        {showDetails && \n                        <RouteDetails RouteNodes={trip.nodes} />}\n                    </div>\n                </div>\n               \n            </div>\n            )\n        }\n        \n    }\n    \n    export default RouteView \n    \n    \n    ","import React from \"react\";\nimport { IPoint, IRoute,route, ITrip } from \"dvbjs\";\nimport RouteView from \"./RouteView\";\n// import moment from \"moment\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\n\n\n\ninterface IState {\n    fetchedRoutes: IRoute | null\n    isLoading: boolean\n}\n\ninterface IProps {\n    fromStop: IPoint | null,\n    toStop: IPoint| null,\n    selectedTrip: ITrip | null\n    dateTime: Date\n    handleSelectedTrip: (trip:ITrip) => void\n    handleEditTrip: ()=>void\n}\n\nclass Routes extends React.Component<IProps, IState> {\n    constructor(props:IProps){\n        super(props)\n        this.state = {\n            fetchedRoutes: null,\n            isLoading:false\n        }\n    }\n    fetchRoutes(){\n        \n        const from = this.props.fromStop\n        const to = this.props.toStop \n        const date = this.props.dateTime\n        // const timezoneOffset = datetimeLocale.getTimezoneOffset()\n        // const isoDate = moment(datetimeLocale).add(-timezoneOffset, 'm').toDate()\n        // const isoDate = datetimeLocale\n        \n        // console.log(date.toISOString())\n        if (from && to) {    \n            this.setState({isLoading: true})        \n            route(from!.id,to!.id, date, false)\n            .then(route => {\n                this.setState({fetchedRoutes: route,\n                isLoading:false})\n                console.log(route)\n            })\n            .catch(err=>console.log)\n        }        \n    }\n    componentDidUpdate(prevProps:IProps){\n        if (this.props.toStop !== prevProps.toStop || this.props.fromStop !== prevProps.fromStop || this.props.dateTime !== prevProps.dateTime) {\n            this.fetchRoutes()\n        }\n    }\n\n    componentDidMount(){\n        if (this.props.toStop && this.props.fromStop) {\n            this.fetchRoutes()\n        }\n\n    }\n\n    render(){\n        const fetchedRoutes = this.state.fetchedRoutes; \n        \n        \n\n        let content;\n        if (this.props.selectedTrip) {\n            const trip = this.props.selectedTrip\n            content = <RouteView trip={trip} handleSelectedTrip={(e)=>{}} selectable={false} handleEditTrip={this.props.handleEditTrip}/>\n        } else {\n            if (this.props.dateTime && this.props.fromStop && this.props.toStop) {\n                if (this.state.isLoading) {\n                  const spinner = <div className=\"LoadingSpinner text-center\"><span className=\"align-middle\"><FontAwesomeIcon icon={faSpinner} size=\"3x\" pulse={true}/></span></div>\n                    content = spinner\n                } else {\n                  const routeItems = fetchedRoutes?.trips.map((trip, index) =>\n                  <RouteView selectable={true} trip={trip} key={index} handleSelectedTrip={this.props.handleSelectedTrip} handleEditTrip={()=>{}} />\n                  );\n                  content = routeItems\n                }\n              } else {\n                content = <></>\n              }\n        }\n        \n\n        return (\n            <div>\n                {content}\n            </div>\n          \n        )\n    }\n}\n\nexport default Routes","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPen, faTrash,faPlus } from '@fortawesome/free-solid-svg-icons'\n\ninterface IProps {\n\n}\n\ninterface IState{\n\n}\n\nclass Reisende extends React.Component<IProps> {\n    // constructor(props:IProps){\n    //     super(props)\n    // }\n\n    render(){\n        return (\n            <div className=\"row\">\n               <div className=\"card col-sm-12 shadow-sm mb-2 rounded\">\n                  <div className=\"card-body\">\n                  <h2 className=\"card-title\">Wähle Reisende:</h2>\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>\n                                    Reisende\n                                </th>\n                                <th>\n                                    Fahrgasttyp\n                                </th>\n                                <th>\n                                    Aktionen\n                                </th>\n                            </tr>\n                        </thead>\n                        <tr>\n                            <td>Reisender 1</td>\n                            <td>Erwachsener/Vollzahler</td>\n                            <td><button type=\"button\" className=\"btn btn-secondary btn-sm\" disabled> <FontAwesomeIcon icon={faPen}  /> Ändern</button> \n                  <button type=\"button\" className=\"btn btn-danger btn-sm\" disabled> <FontAwesomeIcon icon={faTrash}  /> Löschen </button></td>\n                        </tr> \n                        <tr>\n                            <td><button type=\"button\" className=\"btn btn-success btn-sm\" disabled> <FontAwesomeIcon icon={faPlus}  /> weitere Reisende hinzufügen </button></td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n\n                    </table>\n                  </div>\n                  \n               </div>\n               \n            </div>\n        )\n    }\n\n}\n\nexport default Reisende \n\n\n","import React from 'react'\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import { faPen, faTrash,faPlus } from '@fortawesome/free-solid-svg-icons'\nimport Select, { ValueType, ActionMeta, OptionsType } from 'react-select'\nimport {Ticket, ITicketItems} from 'vvo-testcases'\n// import { Preisstufe, Produkt } from 'vvo-testcases/build/src/tickets'\n\ninterface IProps {\n    handleProductsChange: (tickets: Ticket[]) => void\n}\n\ninterface IState{\n\n}\n\n\nclass Tarifangebot extends React.Component<IProps> {\n    // constructor(props:IProps){\n    //     super(props)\n    // }\n\n\n    tickets = Ticket.getAllProducts()\n    \n    handleNewSelectedProducts(value: OptionsType<ITicketItems>, actionMeta: ActionMeta<ITicketItems>): void{\n        if (value) {\n            const angebot = value.map((item) => {\n                return new Ticket(item.produkt, item.preisstufe)\n            })\n            this.props.handleProductsChange(angebot)\n        }\n        \n    }\n\n    render(){\n        const options = this.tickets \n        return (\n            <div>\n\n\n            <div>\n                \n            </div>\n            <div className=\"row\">\n               <div className=\"card col-sm-12 shadow-sm mb-2 rounded\">\n                  <div className=\"card-body\">\n                    <h2 className=\"card-title\">SOLL-Tarifangebot</h2>\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th style={{width: \"15%\"}}>\n                                    Reisende\n                                </th>\n                                <th style={{width: \"85%\"}}>\n                                    Tarifangebot\n                                </th>\n                            </tr>\n                        </thead>\n                        <tr>\n                            <td>Reisender 1</td>\n                            <td><Select options={options} isMulti onChange={(selectedOption: ValueType<ITicketItems>, e: ActionMeta<ITicketItems>) => this.handleNewSelectedProducts((selectedOption as ITicketItems[]), e)}/></td>\n                        </tr> \n\n                    </table>\n                  </div>\n                  \n               </div>\n               \n            </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Tarifangebot \n\n\n","// import { saveAs } from 'file-saver';\nimport save from 'save-file'\nimport { Tester, ITestArguments } from 'vvo-testcases';\nimport { ITrip } from 'dvbjs';\n\nfunction getFilename(trip:ITrip):string {\n    const timeStamp = trip.departure ? trip.departure.time : new Date()\n    const timeStampString = timeStamp.toISOString()\n        .replace(/T/, '-')      // replace T with a -\n        .replace(/\\..+/, '')     // delete the dot and everything after\n    const from = trip.departure ? `${trip.departure!.city}${trip.departure!.name}` : \"Unknown Stop\"\n    const to = trip.arrival ? `${trip.arrival!.city}${trip.arrival!.name}` : \"Unknown Stop\"\n\n    return timeStampString + \"_\" + from + \"_\" + to + \".xlsx\"\n\n}\n\n\nexport function savetoFile(testCase: ITestArguments){\n    const fileName = getFilename(testCase.trip)\n    const tester = new Tester()\n    tester.exportSingleTestCase(testCase)\n    .then(async (buffer) =>  {\n        await save(buffer, fileName)\n    })\n}","import React from 'react';\n// import {SearchStopField} from './SearchStopField'\nimport { IPoint, ITrip, POI_TYPE } from 'dvbjs';\n// import StopField from './StopField'\nimport StopBox from './StopBox';\nimport Routes from './Routes';\nimport Datetime from 'react-datetime';\n// import logo from './logo.svg';\nimport './App.css';\nimport './DateTimePicker.css'\nimport * as moment from 'moment';\nimport Reisende from './Reisende';\nimport Tarifangebot from './Tarifangebot';\nimport { Ticket, Fahrgast, ITestArguments } from 'vvo-testcases';\nimport {savetoFile} from './saveToFile'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFileDownload, faPaperPlane } from '@fortawesome/free-solid-svg-icons'\n\n interface IState {\n  fromStop: IPoint | null,\n  toStop:  IPoint | null,\n  selectedTrip: ITrip | null,\n  tripDateTime : Date,\n  angebote : Ticket[][], \n  fahrgaeste: Fahrgast[],\n}\n\n// type stateKeys = \"fromStop\" | \"toStop\"\ninterface UseTestCaseComponentProps {\n  handleExportToFile: (event: React.FormEvent<HTMLButtonElement>) => void\n}\n\nconst UseTestCaseComponent = ({handleExportToFile}: UseTestCaseComponentProps) => (\n  <div className=\"row\">\n    <div className=\"card col-sm-12 shadow-sm mb-2 rounded\">\n      <div className=\"card-body\">\n        <h2 className=\"card-title\">Verwende Testfall</h2>\n        <div className=\"row\">\n         <div className=\"col-sm-6 text-center\">\n              <button className=\"btn btn-lg btn-primary m-4\" onClick={handleExportToFile}>\n                  <FontAwesomeIcon icon={faFileDownload} size=\"lg\"/><br/> \n                  Exportiere Testfall<br/>\n                  <small>IVI-Format (*.xlsx)</small> \n              </button>\n          </div>\n          <div className=\"col-sm-6 text-center\">\n            <button className=\"btn btn-lg btn-info m-4\" disabled>\n              <FontAwesomeIcon icon={faPaperPlane} size=\"lg\"/> <br/>\n              Frage Tarifrechner an<br/>\n              <small>(JSON-Request)</small>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\n\nclass App extends React.Component<{}, IState> {\n  constructor(props:{}){\n    super(props);\n\n    // DEBUG\n    const start:IPoint = {city: \"Radebeul\", coords: [13.6741369627676, 51.10381758791261], name: \"Schildenstraße\", id: \"33004218\", type: POI_TYPE.Stop}\n    const ziel: IPoint = {\n      city: \"Bad Schandau\",\n      coords: [14.149447444887771, 50.91775830470602],\n      id: \"33003621\",\n      name: \"Elbkai\",\n      type: POI_TYPE.Stop\n    }\n    // END DEBUG\n    this.state = {\n        fromStop: start,\n        toStop: ziel,\n        selectedTrip: null,\n        tripDateTime: new Date(),\n        angebote: [],\n        fahrgaeste: [new Fahrgast(33, {nr: 1, name: \"Erwachsener/Vollzahler/jedermann\"})]\n    };\n    this.handleNewSelectedFromStop = this.handleNewSelectedFromStop.bind(this)\n    this.handleResetClickForFromStop = this.handleResetClickForFromStop.bind(this)\n    this.handleNewSelectedToStop = this.handleNewSelectedToStop.bind(this)\n    this.handleResetClickForToStop = this.handleResetClickForToStop.bind(this)\n    this.handelNewDate = this.handelNewDate.bind(this)\n    this.handleSelectedTrip = this.handleSelectedTrip.bind(this)\n    this.handleEditTrip = this.handleEditTrip.bind(this)\n    this.handleProductsChange = this.handleProductsChange.bind(this)\n    this.handleExportToFile = this.handleExportToFile.bind(this)\n  }\n\n  handleExportToFile(event: React.FormEvent<HTMLButtonElement>) {\n    const testCase: ITestArguments = {\n      nr: 1,\n      trip: this.state.selectedTrip!,\n      fahrgaeste: this.state.fahrgaeste,\n      angebote: this.state.angebote\n    }\n    \n    savetoFile(testCase)\n  }\n\n  handleNewSelectedFromStop(stop_id:IPoint) {\n    // let obj :{ [key: string]: IPoint } = {};\n    // obj[stateProperty] = stop_id;\n    // this.setState(obj)\n    this.setState({fromStop: stop_id})\n  } \n  handleNewSelectedToStop(stop_id:IPoint) {\n    this.setState({toStop: stop_id})\n    console.log(stop_id)\n  } \n\n  handleResetClickForToStop(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.setState({toStop: null})\n  }\n  handleResetClickForFromStop(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.setState({fromStop: null})\n  }\n  handelNewDate(value :string|moment.Moment){\n    if (moment.isMoment(value)){\n      this.setState({tripDateTime: value.toDate()}) \n    }\n  }\n\n  handleProductsChange(tickets: Ticket[]):void {\n    \n    const arrayOfTickets :Ticket[][] = []\n    tickets.forEach(ticket =>{\n      arrayOfTickets.push([ticket])\n    })\n    this.setState({angebote: arrayOfTickets})\n    // console.log(tickets)\n  }\n\n  handleSelectedTrip(trip: ITrip) {\n    // console.log(trip)\n    this.setState({selectedTrip: trip})\n  }\n\n  handleEditTrip() {\n    this.setState({selectedTrip: null})\n  }\n    render () {\n\n      const isTripSelected = this.state.selectedTrip ? true : false\n      \n        \n        return (      \n        <div className=\"container\">\n          <h1>Testfallgenerator\n        <small className=\"text-muted\"> für VVO-Tarifrechner</small> </h1>\n        <h2>1. Wähle eine Verbindung:</h2>\n        { !isTripSelected &&\n        \n        <div className=\"row\">\n          \n          <div className=\"col-sm-4\">\n            <StopBox \n            handleNewSelectedStop={this.handleNewSelectedFromStop}\n            handleResetClick={this.handleResetClickForFromStop}\n            title=\"Von\"\n            placeholder=\"Start\"\n            stop={this.state.fromStop} />\n          </div>\n          <div className=\"col-sm-4\">\n            <StopBox \n            handleNewSelectedStop={this.handleNewSelectedToStop}\n            handleResetClick={this.handleResetClickForToStop}\n            title=\"Nach\"\n            placeholder=\"Ziel\"\n            stop={this.state.toStop} />\n          </div>\n          <div className=\"col-sm-4\">\n            {/* <Datetime onChange={this.handelNewDate} value={this.state.tripDateTime} />  \n             */}\n             <div className=\"card shadow-sm mb-2 bg-white rounded\">\n                    <div className=\"card-header\">Abfahrt</div>\n                    <div className=\"card-body\">\n                      <Datetime onChange={this.handelNewDate} dateFormat=\"DD.MM.YYYY\" timeFormat=\"HH:mm\" value={this.state.tripDateTime}/>\n                    </div>\n                </div>\n          </div>\n        </div>}\n          < Routes \n            fromStop={this.state.fromStop}\n            toStop={this.state.toStop}\n            selectedTrip={this.state.selectedTrip}\n            dateTime={this.state.tripDateTime}\n            handleSelectedTrip={this.handleSelectedTrip}\n            handleEditTrip={this.handleEditTrip}/>\n      \n      {isTripSelected && \n      <Reisende/>}\n      {isTripSelected &&\n      <Tarifangebot handleProductsChange={this.handleProductsChange}/>}\n      {isTripSelected &&\n      <UseTestCaseComponent handleExportToFile={this.handleExportToFile} />}\n      </div>\n      )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Fahrgast {\n    constructor(alter, nutzerparameter, rabattmedien, berechtigungen = \"\") {\n        this.alter = alter;\n        this.nutzerparameter = nutzerparameter;\n        this.rabattmedien = rabattmedien;\n        this.berechtigungen = berechtigungen;\n    }\n    export() {\n        const arr = [];\n        arr.push(this.alter.toString());\n        const nutzerparameterString = `${this.nutzerparameter.nr};${this.nutzerparameter.name}`;\n        arr.push(nutzerparameterString);\n        if (this.rabattmedien) {\n            arr.push(`${this.rabattmedien.nr};${this.rabattmedien.name}`);\n        }\n        else {\n            arr.push(\"\");\n        }\n        arr.push(\"\");\n        return arr;\n    }\n}\nexports.Fahrgast = Fahrgast;\nFahrgast.ExcelColumns = 4;\n//# sourceMappingURL=Fahrgast.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst dvb = require(\"dvbjs\");\nconst moment = require(\"moment-timezone\");\nconst exportExcel_1 = require(\"./exportExcel\");\nconst Fahrgast_1 = require(\"./Fahrgast\");\nconst Fahrt_1 = require(\"./Fahrt\");\nclass Tester {\n    constructor() {\n        this.excel = new exportExcel_1.ExcelExport();\n    }\n    static convertDateToXmlTimestamp(date) {\n        const time = moment(date);\n        return time.tz(\"Europe/Berlin\").toISOString(true);\n    }\n    runTestCasesFromFile(testCases, outputFileName) {\n        testCases.forEach((testCase) => {\n            const departureDate = testCase.date ? testCase.date : new Date();\n            dvb.route(testCase.vonId.toString(), testCase.nachId.toString(), departureDate, false)\n                .then((route) => {\n                this.formatTestCase({\n                    nr: testCase.nr,\n                    trip: route.trips[1],\n                    fahrgaeste: testCase.fahrgaeste,\n                    angebote: testCase.angebote,\n                    bemerkung: testCase.bemerkung,\n                    filterFootpaths: testCase.filterFootpaths,\n                });\n            })\n                .catch((err) => console.log(err, testCase));\n        });\n        setTimeout(() => { this.excel.saveFile(outputFileName); }, 5000);\n    }\n    exportSingleTestCase(testCase) {\n        this.formatTestCase(testCase);\n        return this.excel.toBuffer();\n    }\n    formatTestCase(testCase) {\n        if (testCase.filterFootpaths != null) {\n            testCase.filterFootpaths = testCase.filterFootpaths;\n        }\n        else {\n            testCase.filterFootpaths = true;\n        }\n        const fahrt = new Fahrt_1.Fahrt(testCase.trip, testCase.filterFootpaths);\n        let arr = [];\n        arr = arr.concat([testCase.nr.toString(10)]);\n        arr = arr.concat([\"1\"]);\n        arr = arr.concat([\"1\"]);\n        arr = arr.concat([\"58\"]);\n        arr = arr.concat([\"Kaufangebote\"]);\n        const actualDate = Tester.convertDateToXmlTimestamp(new Date());\n        arr = arr.concat([actualDate]);\n        arr = arr.concat(fahrt.exportToExcel());\n        let fahrgaesteExport = [];\n        testCase.fahrgaeste.forEach((fahrgast) => {\n            fahrgaesteExport = fahrgaesteExport.concat(fahrgast.export());\n        });\n        for (let index = 0; index < (Fahrgast_1.Fahrgast.ExcelColumns * 5); index++) {\n            if (!fahrgaesteExport[index]) {\n                fahrgaesteExport[index] = \"\";\n            }\n        }\n        arr = arr.concat(fahrgaesteExport);\n        arr.push(testCase.bemerkung ? testCase.bemerkung : \"\");\n        const angeboteExport = [];\n        for (let i = 0; i < 6; i++) {\n            for (let j = 0; j < 6; j++) {\n                let ticket = null;\n                if (testCase.angebote[i] && testCase.angebote[i][j]) {\n                    ticket = testCase.angebote[i][j];\n                }\n                angeboteExport[i * 6 + j] = ticket ? ticket.export(fahrt.fahrtenbezug()) : \"\";\n            }\n        }\n        arr = arr.concat(angeboteExport);\n        this.excel.addRow(arr);\n    }\n}\nexports.Tester = Tester;\n//# sourceMappingURL=Tester.js.map"],"sourceRoot":""}